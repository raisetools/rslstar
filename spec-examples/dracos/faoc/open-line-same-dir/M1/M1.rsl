Base
scheme M1 = extend Base with
class
  value
    route[t : TrainID'] : Route,
    switchboxes[t : TrainID'] : Switchboxes
  axiom -- configured
    route[t1] = [s2+>s3],
    route[t2] = [s3+>s5],
    switchboxes[t1] = [sb2+>sb3],
    switchboxes[t2] = [sb3+>sb5]
  transition_system
    [TS]
    variable
      pos[t : TrainID'] : Position, 
      nextSb[t : TrainID'] : SwitchboxID',
      tReservations[t : TrainID'] : TReservation,
      tLocks[t : TrainID'] : TLock, 

      sbSensor[sb : SwitchboxID'] : SensorState,
      sbReservations[sb : SwitchboxID'] : SbReservation,
      sbLock[s : SwitchboxID'] : TrainID,
      sbConnection[sb : SwitchboxID'] : Connection

    init_constraint -- configured
      pos[t1] = single(s2) /\
      pos[t2] = single(s3) /\
      nextSb[t1] = sb2 /\
      nextSb[t2] = sb3 /\
      tReservations[t1] = [sb2+>{s2}] /\
      tReservations[t2]= [sb3+>{s3}] /\
      (all t : TrainID' :- tLocks[t] = {}) /\
      (all sb : SwitchboxID' :- sbSensor[sb] = passive) /\
      sbReservations[sb0] = [s1+>t_none] /\
      sbReservations[sb1] = [s2+>t_none] /\
      sbReservations[sb2] = [s2+>t1, s1+>t_none, s3+>t_none] /\
      sbReservations[sb3] = [s3+>t2, s4+>t_none, s5+>t_none] /\
      sbReservations[sb4] = [s4+>t_none] /\
      sbReservations[sb5] = [s5+>t_none] /\
      (all sb : SwitchboxID' :- sbLock[sb] = t_none) /\
      sbConnection[sb0] = border(s1) /\
      sbConnection[sb1] = border(s2) /\
      sbConnection[sb2] = conn(s2,s3) /\
      sbConnection[sb3] = conn(s3,s5) /\
      sbConnection[sb4] = border(s4) /\
      sbConnection[sb5] = border(s5) 
      
    transition_rules
      Reserve [=] Lock [=] Move
      
      where 

      [Move] = 
      (([=] t : TrainID', sb : SwitchboxID' :-
        [move_single_to_double]
          is_single_pos(pos[t]) /\
	  sb = nextSb[t] /\
          t_can_move(seg(pos[t]), nextSb[t], route[t], switchboxes[t], tLocks[t], tReservations[t]) 
          ==>
          pos'[t] = move_pos_single(pos[t], route[t]), 
          sbSensor'[sb] = active
      )

      [=]

      ([=] t : TrainID', sb : SwitchboxID' :-
        [move_double_to_single]
          ~is_single_pos(pos[t]) /\
	  sb = nextSb[t]
          ==>
          pos'[t] = move_pos_double(pos[t]),
          nextSb'[t] = move_nextsb(sb, switchboxes[t]),
          tReservations'[t] = move_t_reservations(sb, tReservations[t]),
          tLocks'[t] = move_t_locks(sb, tLocks[t]),
          sbSensor'[sb] = passive,
          sbReservations'[sb] = move_sb_reservations(pos[t], sbReservations[sb]), 
          sbLock'[sb] = t_none
      )

      [=]

      ([=] t : TrainID' :-
        [move_end]
	t_is_at_end(route[t], pos[t])
	==>
	pos'[t] = pos[t]
      )), 

      [Reserve] = 
      (([=] sb : SwitchboxID', t : TrainID', seg : SegmentID :- 
        [reserve]
          t_can_reserve(pos[t], switchboxes[t], route[t], tReservations[t], seg, sb) /\
          sb_can_reserve(sbReservations[sb], seg) 
          ==>
          tReservations'[t] = reserve_t(tReservations[t], sb, seg),
	  sbReservations'[sb] = reserve_sb(sbReservations[sb], t, seg)
      )),

      [Lock] =
      (([=] sb : SwitchboxID', t : TrainID', seg1 : SegmentID, seg2 : SegmentID :-
        [lock]
          t_can_lock(pos[t], conn(seg1,seg2), route[t], switchboxes[t], tReservations[t], sb, tLocks[t]) /\ 
          sb_can_lock(conn(seg1,seg2), sbLock[sb], sbSensor[sb]) 
          ==>
	  sbConnection'[sb] = conn(seg1,seg2), 
          tLocks'[t] = lock_t(tLocks[t], sb),
 	  sbLock'[sb] = t
      ))

    end

    ltl_assertion
    -- SAFETY
    [no_collide]
      TS |- (all tid1, tid2 : TrainID' :-
      	      G(no_collide(tid1, tid2, pos[tid1], pos[tid2]))),
	      
    [no_derail]
      TS |- (all t : TrainID', sb : SwitchboxID' :-
      	      G(sb = nextSb[t] => no_derail(pos[t], sbConnection[sb]))),
	      
    [no_derail_t1]
      TS |- (all sb : SwitchboxID' :-
      	      G(sb = nextSb[t1] => no_derail(pos[t1], sbConnection[sb]))),

    [no_derail_t2]
      TS |- (all sb : SwitchboxID' :-
      	      G(sb = nextSb[t1] => no_derail(pos[t1], sbConnection[sb]))), 

    -- INVARIANTS
    [cons_res_pos]
      TS |- (all t : TrainID' :-
      	      G(cons_res_pos(tReservations[t], pos[t], nextSb[t], switchboxes[t]))),

    [cons_locks_pos]
      TS |- (all t : TrainID' :-
      	      G(cons_locks_pos(tLocks[t], pos[t], nextSb[t]))),

    [cons_res_route]
      TS |- (all t : TrainID' :-
       	    G(cons_res_route(tReservations[t], route[t]))),
    
    [cons_locks_switchboxes]
      TS |- (all t : TrainID' :-
      	      G(cons_locks_switchboxes(tLocks[t], switchboxes[t]))),

    [cons_pos_network]
      TS |- (all t : TrainID' :-
      	      G(cons_pos_network(pos[t], network))),
	      
    [cons_pos_route]
      TS |- (all t : TrainID' :-
      	      G(cons_pos_route(pos[t], route[t]))),
	      
    [cons_nextsb_switchboxes]
      TS |- (all t : TrainID' :-
      	      G(cons_nextsb_switchboxes(nextSb[t], switchboxes[t]))),
	      
    [cons_nextsb_pos]
      TS |- (all t : TrainID' :-
      	      G(cons_nextsb_pos(nextSb[t], pos[t], netSwitchboxes))),
	      
    [cons_connection_netswitchboxes]
      TS |- (all sb : SwitchboxID' :-
      	      G(cons_connection_netswitchboxes(sbConnection[sb],netSwitchboxes(sb)))),

    [cons_reservations_netswitchboxes]
      TS |- (all sb : SwitchboxID' :-
      	      G(cons_sb_res_netswitchboxes(sbReservations[sb],netSwitchboxes(sb)))),

    [cons_t_sb_res]
      TS |- (all sb : SwitchboxID', t : TrainID' :-
      	      G(cons_t_sb_res(t, sb, tReservations[t], sbReservations[sb]))),

    [cons_sb_t_res]
      TS |- (all sb : SwitchboxID', t : TrainID' :-
      	      G(cons_sb_t_res(t, sb, tReservations[t], sbReservations[sb]))),

    [cons_locks]
      TS |- (all sb : SwitchboxID', t : TrainID' :-
      	      G(cons_locks(t, sb, tLocks[t], sbLock[sb]))),
	      
    [cons_sensor_pos]
      TS |- (all sb : SwitchboxID', t : TrainID' :-
      	      G(sb = nextSb[t] => cons_sensor_pos(pos[t], sbSensor[sb]))),

    -- SHOW TRACE OF SUCCESSFULLY REACHING DESTINATION
    [not_all_trains_arrive] TS |- G( ~(all t : TrainID' :- t_is_at_end(route[t], pos[t])))

  end
